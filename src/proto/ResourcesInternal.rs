// This file is generated by rust-protobuf 2.16.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `ResourcesInternal.proto`

use protobuf::{Message, ProtobufEnum};

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_16_2;

#[derive(PartialEq,Clone,Default,Debug)]
pub struct CompiledFile {
    // message fields
    pub resource_name: ::std::string::String,
    pub config: ::protobuf::SingularPtrField<super::Configuration::Configuration>,
    pub field_type: super::Resources::FileReference_Type,
    pub source_path: ::std::string::String,
    pub exported_symbol: ::protobuf::RepeatedField<CompiledFile_Symbol>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CompiledFile {
    fn default() -> &'a CompiledFile {
        <CompiledFile as ::protobuf::Message>::default_instance()
    }
}

impl CompiledFile {
    pub fn new() -> CompiledFile {
        ::std::default::Default::default()
    }

    // string resource_name = 1;


    pub fn get_resource_name(&self) -> &str {
        &self.resource_name
    }
    pub fn clear_resource_name(&mut self) {
        self.resource_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_resource_name(&mut self, v: ::std::string::String) {
        self.resource_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_resource_name(&mut self) -> &mut ::std::string::String {
        &mut self.resource_name
    }

    // Take field
    pub fn take_resource_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.resource_name, ::std::string::String::new())
    }

    // .aapt.pb.Configuration config = 2;


    pub fn get_config(&self) -> &super::Configuration::Configuration {
        self.config.as_ref().unwrap_or_else(|| <super::Configuration::Configuration as ::protobuf::Message>::default_instance())
    }
    pub fn clear_config(&mut self) {
        self.config.clear();
    }

    pub fn has_config(&self) -> bool {
        self.config.is_some()
    }

    // Param is passed by value, moved
    pub fn set_config(&mut self, v: super::Configuration::Configuration) {
        self.config = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_config(&mut self) -> &mut super::Configuration::Configuration {
        if self.config.is_none() {
            self.config.set_default();
        }
        self.config.as_mut().unwrap()
    }

    // Take field
    pub fn take_config(&mut self) -> super::Configuration::Configuration {
        self.config.take().unwrap_or_else(|| super::Configuration::Configuration::new())
    }

    // .aapt.pb.FileReference.Type type = 3;


    pub fn get_field_type(&self) -> super::Resources::FileReference_Type {
        self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type = super::Resources::FileReference_Type::UNKNOWN;
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: super::Resources::FileReference_Type) {
        self.field_type = v;
    }

    // string source_path = 4;


    pub fn get_source_path(&self) -> &str {
        &self.source_path
    }
    pub fn clear_source_path(&mut self) {
        self.source_path.clear();
    }

    // Param is passed by value, moved
    pub fn set_source_path(&mut self, v: ::std::string::String) {
        self.source_path = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_source_path(&mut self) -> &mut ::std::string::String {
        &mut self.source_path
    }

    // Take field
    pub fn take_source_path(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.source_path, ::std::string::String::new())
    }

    // repeated .aapt.pb.internal.CompiledFile.Symbol exported_symbol = 5;


    pub fn get_exported_symbol(&self) -> &[CompiledFile_Symbol] {
        &self.exported_symbol
    }
    pub fn clear_exported_symbol(&mut self) {
        self.exported_symbol.clear();
    }

    // Param is passed by value, moved
    pub fn set_exported_symbol(&mut self, v: ::protobuf::RepeatedField<CompiledFile_Symbol>) {
        self.exported_symbol = v;
    }

    // Mutable pointer to the field.
    pub fn mut_exported_symbol(&mut self) -> &mut ::protobuf::RepeatedField<CompiledFile_Symbol> {
        &mut self.exported_symbol
    }

    // Take field
    pub fn take_exported_symbol(&mut self) -> ::protobuf::RepeatedField<CompiledFile_Symbol> {
        ::std::mem::replace(&mut self.exported_symbol, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for CompiledFile {
    fn is_initialized(&self) -> bool {
        for v in &self.config {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.exported_symbol {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.resource_name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.config)?;
                },
                3 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.field_type, 3, &mut self.unknown_fields)?
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.source_path)?;
                },
                5 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.exported_symbol)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.resource_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.resource_name);
        }
        if let Some(ref v) = self.config.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.field_type != super::Resources::FileReference_Type::UNKNOWN {
            my_size += ::protobuf::rt::enum_size(3, self.field_type);
        }
        if !self.source_path.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.source_path);
        }
        for value in &self.exported_symbol {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.resource_name.is_empty() {
            os.write_string(1, &self.resource_name)?;
        }
        if let Some(ref v) = self.config.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.field_type != super::Resources::FileReference_Type::UNKNOWN {
            os.write_enum(3, ::protobuf::ProtobufEnum::value(&self.field_type))?;
        }
        if !self.source_path.is_empty() {
            os.write_string(4, &self.source_path)?;
        }
        for v in &self.exported_symbol {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CompiledFile {
        CompiledFile::new()
    }

    fn default_instance() -> &'static CompiledFile {
        static instance: ::protobuf::rt::LazyV2<CompiledFile> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CompiledFile::new)
    }
}

impl ::protobuf::Clear for CompiledFile {
    fn clear(&mut self) {
        self.resource_name.clear();
        self.config.clear();
        self.field_type = super::Resources::FileReference_Type::UNKNOWN;
        self.source_path.clear();
        self.exported_symbol.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for CompiledFile {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct CompiledFile_Symbol {
    // message fields
    pub resource_name: ::std::string::String,
    pub source: ::protobuf::SingularPtrField<super::Resources::SourcePosition>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CompiledFile_Symbol {
    fn default() -> &'a CompiledFile_Symbol {
        <CompiledFile_Symbol as ::protobuf::Message>::default_instance()
    }
}

impl CompiledFile_Symbol {
    pub fn new() -> CompiledFile_Symbol {
        ::std::default::Default::default()
    }

    // string resource_name = 1;


    pub fn get_resource_name(&self) -> &str {
        &self.resource_name
    }
    pub fn clear_resource_name(&mut self) {
        self.resource_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_resource_name(&mut self, v: ::std::string::String) {
        self.resource_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_resource_name(&mut self) -> &mut ::std::string::String {
        &mut self.resource_name
    }

    // Take field
    pub fn take_resource_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.resource_name, ::std::string::String::new())
    }

    // .aapt.pb.SourcePosition source = 2;


    pub fn get_source(&self) -> &super::Resources::SourcePosition {
        self.source.as_ref().unwrap_or_else(|| <super::Resources::SourcePosition as ::protobuf::Message>::default_instance())
    }
    pub fn clear_source(&mut self) {
        self.source.clear();
    }

    pub fn has_source(&self) -> bool {
        self.source.is_some()
    }

    // Param is passed by value, moved
    pub fn set_source(&mut self, v: super::Resources::SourcePosition) {
        self.source = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_source(&mut self) -> &mut super::Resources::SourcePosition {
        if self.source.is_none() {
            self.source.set_default();
        }
        self.source.as_mut().unwrap()
    }

    // Take field
    pub fn take_source(&mut self) -> super::Resources::SourcePosition {
        self.source.take().unwrap_or_else(|| super::Resources::SourcePosition::new())
    }
}

impl ::protobuf::Message for CompiledFile_Symbol {
    fn is_initialized(&self) -> bool {
        for v in &self.source {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.resource_name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.source)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.resource_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.resource_name);
        }
        if let Some(ref v) = self.source.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.resource_name.is_empty() {
            os.write_string(1, &self.resource_name)?;
        }
        if let Some(ref v) = self.source.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CompiledFile_Symbol {
        CompiledFile_Symbol::new()
    }

    fn default_instance() -> &'static CompiledFile_Symbol {
        static instance: ::protobuf::rt::LazyV2<CompiledFile_Symbol> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CompiledFile_Symbol::new)
    }
}

impl ::protobuf::Clear for CompiledFile_Symbol {
    fn clear(&mut self) {
        self.resource_name.clear();
        self.source.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for CompiledFile_Symbol {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}
